apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: etl-pvc
  namespace: default
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: longhorn
  resources:
    requests:
      storage: 1Gi

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: etl
  namespace: default
  labels:
    allow.http: "false"
    application: etl
spec:
  replicas: 1
  selector:
    matchLabels:
      application: etl
  template:
    metadata:
      labels:
        application: etl
    spec:
      imagePullSecrets:
       - name: pipeline-docker-registry
      containers:
      - name: etl
        image: ${CICD_IMAGE}:${CICD_EXECUTION_SEQUENCE}
        # imagePullPolicy: IfNotPresent
        resources:
          limits:
            memory: "128Mi"
            cpu: "500m"
          requests:
            memory: "100Mi"
            cpu: "100m"
        ports:
        - containerPort: 80
        - containerPort: 22
        securityContext:
          privileged: true
        volumeMounts:
          - name:  etl-volume
            mountPath:  /code
      volumes:
      - name: etl-volume
        persistentVolumeClaim:
          claimName: etl-pvc

---
apiVersion: v1
kind: Service
metadata:
  name: etl
  namespace: default
spec:
  selector:
    application: etl
  type: ClusterIP
  ports:
  - name: etl
    port: 80
    targetPort: 80
    protocol: TCP
  - name: etl
    port: 22
    targetPort: 22
    protocol: TCP

---

kind: Ingress
apiVersion: extensions/v1beta1
metadata:
  name: etl  
  namespace: default
  annotations:
    kubernetes.io/ingress.class: traefik
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/router.tls.certresolver: default
spec:
  rules:
    - host: 'etl.ac.gov.br'
      http:
        paths:
          - backend:
              serviceName: etl
              servicePort: 80
      ssh:
        paths:
          - backend:
              serviceName: etl
              servicePort: 22
  tls:
    - hosts:
      - 'etl.ac.gov.br'

